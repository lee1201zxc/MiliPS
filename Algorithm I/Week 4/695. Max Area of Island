### 강민수 풀이
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int result = 0;
        int dx[4] = {-1, 1, 0, 0};
        int dy[4] = {0, 0, -1, 1};
        for(int i = 0; i< m ; i++){
            for (int j = 0; j< n ; j++){
                if (grid[i][j] != 1) continue;
                // grid 값이 1이라면
                queue<pair<int,int>> q;
                q.push(make_pair(i, j));
                int cnt = 0;
                while(!q.empty()){
                    pair<int, int> p = q.front(); q.pop();
                    grid[p.first][p.second] = -1;
                    cnt++;
                    for (int k = 0; k < 4; k++){
                        int nx = p.first + dx[k], ny = p.second + dy[k];
                        if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                        if (grid[nx][ny] == 1){
                            q.push(make_pair(nx, ny));
                            grid[nx][ny] = -1;
                        }
                    }
                }
                result = max(result, cnt);

            }
        }
        return result;
    }

};

// 찾은 DFS 
int maxAreaOfIsland(vector<vector<int>>& grid) {
        int max_area = 0;
        for(int i = 0; i < grid.size(); i++)
            for(int j = 0; j < grid[0].size(); j++)
                if(grid[i][j] == 1)max_area = max(max_area, AreaOfIsland(grid, i, j));
        return max_area;
    }
    
    int AreaOfIsland(vector<vector<int>>& grid, int i, int j){
        if( i >= 0 && i < grid.size() && j >= 0 && j < grid[0].size() && grid[i][j] == 1){
            grid[i][j] = 0;
            return 1 + AreaOfIsland(grid, i+1, j) + AreaOfIsland(grid, i-1, j) + AreaOfIsland(grid, i, j-1) + AreaOfIsland(grid, i, j+1);
        }
        return 0;
    }


### 이원호 풀이 ###

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid)
    {
        int x[4]={0,0,1,-1};
        int y[4]={1,-1,0,0};
        int q=0;
        int ans=0;
        for(int i=0; i<grid.size(); i++)
        {
            for(int z=0; z<grid[0].size(); z++)
            {
                ans=0;
                if(grid[i][z]==1)
                {
                    ans++;
                    queue<pair<int,int>> v;
                    v.push(make_pair(i,z));
                    while(!v.empty())
                    {
                        pair<int,int> k;
                        k=make_pair(v.front().first,v.front().second);
                        grid[k.first][k.second]=0;
                        v.pop();
                        for(int c=0; c<4; c++)
                        {
                            int xx=x[c]+k.second;
                            int yy=y[c]+k.first;
                            if(xx<0||yy<0||xx>=grid[0].size()||yy>=grid.size()||grid[yy][xx]==0)
                                continue;
                            else
                            {
                                grid[yy][xx]=0;
                                v.push(make_pair(yy,xx));
                                ans++;
                            }
                        }
                    }
                    if(q<ans)
                        q=ans;
                }
            }
        }   
        return q; 
    }
};
