### 강민수 풀이
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int m = image.size(), n = image[0].size();
        int dx[4] = {-1, 1, 0, 0};
        int dy[4] = {0, 0, -1, 1};
        int targetColor = image[sr][sc];
        queue<pair<int, int>> q;
        q.push(make_pair(sr, sc));

        while(!q.empty()) {
            pair<int, int> p = q.front();
            q.pop();
            int x = p.first, y = p.second;
            image[x][y] = color;
            for (int i = 0; i < 4; i++){
                int nx = x + dx[i], ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                if (image[nx][ny] == color) continue;
                if (image[nx][ny] == targetColor) {
                    q.push(make_pair(nx, ny));
                }
            }
        }

        return image;
    }
};


///DFS 풀이

class Solution {
public:
    
    void dfs(vector<vector<int>>& image, int i, int j,int val, int newColor)
    {
        if(i<0 || i>=image.size() || j<0 || j>= image[0].size() || image[i][j] == newColor || image[i][j] != val)
        {
            return;
        }
        image[i][j] = newColor;
        dfs(image,i-1,j,val,newColor);
        dfs(image,i+1,j,val,newColor);
        dfs(image,i,j-1,val,newColor);
        dfs(image,i,j+1,val,newColor);
    }
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor)
    {
        int val = image[sr][sc];
        dfs(image,sr,sc,val,newColor);
        return image;
    }
};


### 이원호 풀이 ###

class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color)
    {
        int x[4]={-1,1,0,0};
        int y[4]={0,0,1,-1};
        int z=image[sr][sc];
        queue<pair<int,int>> v;
        v.push(make_pair(sr,sc));
        while(!v.empty())
        {
            pair<int,int> k=make_pair(v.front().first,v.front().second);
            image[k.first][k.second]=color;
            v.pop();
            for(int i=0; i<4; i++)
            {
                if(k.second+x[i]<0||k.first+y[i]<0||k.first+y[i]>=image.size()||k.second+x[i]>=image[0].size())
                    continue;
                else if(image[k.first+y[i]][k.second+x[i]]!=color&&image[k.first+y[i]][k.second+x[i]]==z)
                {
                    v.push(make_pair(k.first+y[i],k.second+x[i]));
                }
            }
        }
        return image;
    }
};
